name: Template Docker Build AMD64 + ARM64

env:
  namespace: PLACEHOLDER # TODO: REPLACE WITH: drone | bin | gcs ...


# Controls when the action will run. 
on:
  push:
    branches: [ '*' ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  Build:
    # The type of runner that the job will run on
    runs-on: self-hosted

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout
        uses: actions/checkout@v2.3.4
        with:
          ref: ${{ github.head_ref }}   # checkout the correct branch name
          fetch-depth: 0                # fetch the whole repo history
          persist-credentials: false

      - name: Set up QEMU
        uses: docker/setup-qemu-action@master
        with:
          platforms: all

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@master
        with:
          driver-opts: network=host
          driver: docker

      - name: Login to Container Registry
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.JFROG_URL }}
          username: ${{ secrets.DOCKER_REGISTRY_USER }} 
          password: ${{ secrets.DOCKER_REGISTRY_PASSWORD }}
      
      - name: Handle version update
        uses: teveltech/github-tag-action@master
        id: semantic
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          dry_run: true

      - name: Build AMD64
        uses: docker/build-push-action@v2
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          pull: true
          push: true
          tags: jfrog.local:8081/reg/${{ env.namespace }}/${{ github.event.repository.name }}:${{ steps.semantic.outputs.new_tag }}
          build-args: IMAGE_ARCH=AMD64    # TODO: Dockerfile should use image according to this variable (this is the default value and therefore redundant)

      - name: Build ARM64
        uses: docker/build-push-action@v2
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: .
          file: ./Dockerfile
          platforms: linux/arm64
          pull: true
          push: true
          tags: jfrog.local:8081/reg/${{ env.namespace }}/${{ github.event.repository.name }}:${{ steps.semantic.outputs.new_tag }}-ARM64
          build-args: IMAGE_ARCH=ARM64    # TODO: Dockerfile should use image according to this variable

  Github_Tag_and_Release:
    needs: Build
    runs-on: self-hosted
    container: jfrog.local:8081/reg/base/base-ci:master-AMD64
    
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout
        uses: actions/checkout@v2.3.4
        with:
          ref: ${{ github.head_ref }}   # checkout the correct branch name
          fetch-depth: 0                # fetch the whole repo history

      - name: Handle version update
        uses: teveltech/github-tag-action@master
        id: semantic
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          dry_run: true

      - name: git config
        run: |
          git config user.email "GitHub Actions"
          git config user.name "GitHub Actions"
          
      - name: Create Lightweight Tag
        if: ${{ steps.semantic.outputs.new_tag && steps.semantic.outputs.prerelease == 'true' }}
        run: |
          git tag -f ${{ steps.semantic.outputs.new_tag }}
          git push --force origin ${{ steps.semantic.outputs.new_tag }}
          
      - name: Create Annotated Tag
        if: ${{ steps.semantic.outputs.new_tag && steps.semantic.outputs.prerelease == 'false' }}
        run: |
          git tag -a -f -m "${{ github.event.head_commit.message }}" ${{ steps.semantic.outputs.new_tag }}
          git push --force origin ${{ steps.semantic.outputs.new_tag }}
                    
      - name: Create a GitHub release
        if: ${{ steps.semantic.outputs.new_tag && steps.semantic.outputs.prerelease == 'false' }}
        uses: softprops/action-gh-release@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.semantic.outputs.new_tag }}
          name: Release ${{ steps.semantic.outputs.new_tag }}
          body: |
            Docker pull command:
            <pre><code> docker pull jfrog.local:8081/reg/${{ env.namespace }}/${{ github.event.repository.name }}:${{ steps.semantic.outputs.new_tag }} </code></pre>
            ${{ steps.semantic.outputs.changelog }}
